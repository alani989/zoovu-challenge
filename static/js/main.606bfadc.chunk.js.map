{"version":3,"sources":["Components/Stopwatch.jsx","Components/Score.jsx","Components/FindMeCard.jsx","Components/DragAndDrop.jsx","Components/LogoSort.jsx","Components/DropSlot.jsx","Components/DragAndDropContainer.jsx","Components/MainContainer.jsx","Components/EndGame.jsx","Components/Layout.jsx","App.js","serviceWorker.js","index.js"],"names":["Stopwatch","props","seconds","minutes","hours","render","formatted","getFinalScore","Score","useState","finalScore","setFinalScore","useEffect","solved","submitScore","score","stopwatch","useMemo","className","penalty","imagesPath","process","FindMeCard","findMeItem","allFound","src","alt","DragAndDrop","drawRandomCards","letters","arr","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffleArry","map","letter","i","key","id","onDragStart","e","drag","dataTransfer","setData","target","onSort","sortedList","items","sortList","type","LogoSort","processSort","z","rank","content","value","v","u","endGame","DropSlot","onDragOver","allowDrop","onDrop","drop","initOrderList","newList","DragAndDropContainer","createList","slots","push","createNewList","listItem","preventDefault","getValueFromImg","img","n","indexOf","data","getData","droppedImg","document","getElementById","dropSlot","setAttribute","appendChild","updatePickedCards","dropSlotId","getAttribute","slot","checkInitialOrder","getRank","list","check","item","unrevealedLetters","this","Component","MainContainer","setFindMeItem","setAllFound","getFirstFindItem","randomItem","updateFindMeItem","newArr","penalize","card","filter","EndGame","restartGame","window","location","reload","setInterval","Layout","setPenalty","setSolved","scoreSubmitted","setScoreSubmitted","App","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.606bfadc.chunk.js","sourcesContent":["import React from 'react'\nimport ReactStopwatch from 'react-stopwatch'\n\nconst Stopwatch = (props) => (\n  <ReactStopwatch\n    seconds={0}\n    minutes={0}\n    hours={0}\n    render={({ formatted }) => {\n      props.getFinalScore(formatted)\n      return (\n        <div>\n          <h4>Score: {formatted}</h4>\n        </div>\n      )\n    }}\n  />\n)\n\nexport default Stopwatch\n","import React, { useMemo, useState, useEffect } from 'react'\nimport Stopwatch from './Stopwatch'\n\nconst Score = props => {\n  let [finalScore, setFinalScore] = useState(0)\n\n  useEffect(() => {\n    if (props.solved) {\n      return props.submitScore(true)\n    }\n  }, [props, props.solved])\n\n  const getFinalScore = score => {\n    setFinalScore(score)\n  }\n\n  // using useMemo hook to prevent re render for the stopwatch\n  const stopwatch = useMemo(() => {\n    return <Stopwatch getFinalScore={getFinalScore} />\n  }, [])\n\n  return (\n    <div>\n      {!props.solved ? (\n        stopwatch\n      ) : (\n        <div>\n          <h4>Score: {finalScore}</h4>\n        </div>\n      )}\n      <h4 className='text-danger'>Penalties: {props.penalty}s</h4>\n    </div>\n  )\n}\n\nexport default Score\n","import React from 'react'\n\nconst imagesPath = process.env.PUBLIC_URL + '/assets/'\n\nconst FindMeCard = props => {\n  let { findMeItem } = props\n  return (\n    <div className='find-me-div'>\n      <div className='row d-flex justify-content-center'>\n        <p>{!props.allFound ? 'Find This Letter' : 'All Found, please sort'}</p>\n      </div>\n      <div className='d-flex justify-content-center'>\n        {!props.allFound && findMeItem ? (\n          <img\n            className='card-img'\n            src={`${imagesPath}${findMeItem.src}`}\n            alt=''\n          />\n        ) : (\n          <img className='card-img' src={`${imagesPath}check.png`} alt='' />\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default FindMeCard\n","import React, { useMemo } from 'react'\nimport DragSortableList from 'react-drag-sortable'\n\nconst imagesPath = process.env.PUBLIC_URL + '/assets/'\n\nconst shuffleArry = (arr) => {\n  var currentIndex = arr.length, temporaryValue, randomIndex;\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    // And swap it with the current element.\n    temporaryValue = arr[currentIndex];\n    arr[currentIndex] = arr[randomIndex];\n    arr[randomIndex] = temporaryValue;\n  }\n  return arr;\n}\n\nconst DragAndDrop = props => {\n  const drawRandomCards = (letters) => {\n    shuffleArry(letters)\n    return letters.map((letter, i) => {\n      return (\n        <div className='drag-box' key={`drag-box-key-${i}`}>\n          <img\n            className='card-img'\n            id={letter.id}\n            src={`${imagesPath}question.jpg`}\n            onDragStart={e => drag(e)}\n            alt={letter.src}\n          />\n        </div>\n      )\n    })\n  }\n\n  const drag = e => {\n    e.dataTransfer.setData('text', e.target.id)\n  }\n\n  const onSort = (sortedList, e) => {\n    return null\n  }\n\n  const renderComponent = useMemo(() => {\n    return (\n      <div>\n        <div className='row'>{drawRandomCards(props.letters)}</div>\n        <hr />\n        <div className='row'>\n          <DragSortableList\n            items={props.sortList}\n            onSort={onSort}\n            type='horizontal'\n          />\n        </div>\n      </div>\n    )\n  }, [])\n\n  return renderComponent\n}\n\nexport default DragAndDrop\n","import React, { useMemo } from \"react\";\nimport DragSortableList from \"react-drag-sortable\";\n\nconst LogoSort = props => {\n  const onSort = (sortedList, e) => {\n    processSort(sortedList);\n  };\n\n  const processSort = sortedList => {\n    let z =\n      sortedList[0].rank === 0 && sortedList[0].content.props.value === \"z\";\n    let v =\n      sortedList[3].rank === 3 && sortedList[3].content.props.value === \"v\";\n    let u =\n      sortedList[4].rank === 4 && sortedList[4].content.props.value === \"u\";\n    // ignore O as it is the same letter for two indexes\n    if (z && v & u) {\n      return props.endGame();\n    } else {\n      return null;\n    }\n  };\n\n  const renderComponent = useMemo(() => {\n    return (\n      <div className=\"container m-5\">\n        <div className=\"row\">\n          <h4>Please Sort</h4>\n        </div>\n        <hr />\n        <div className=\"row\">\n          <DragSortableList\n            items={props.sortList}\n            onSort={onSort}\n            type=\"horizontal\"\n          />\n        </div>\n      </div>\n    );\n  }, []);\n\n  return renderComponent;\n};\n\nexport default LogoSort;\n","import React from 'react'\n\nconst DropSlot = props => {\n  return (\n    <div\n      id={props.id}\n      className='drop-box'\n      onDragOver={e => props.allowDrop(e)}\n      onDrop={e => props.drop(e)}\n    ></div>\n  )\n}\n\nexport default DropSlot\n","import React, { Component } from \"react\";\nimport DragAndDrop from \"./DragAndDrop\";\nimport LogoSort from \"./LogoSort\";\nimport DropSlot from \"./DropSlot\";\n\nconst imagesPath = process.env.PUBLIC_URL + \"/assets/\";\n\nlet initOrderList = [];\nlet newList = [];\n\nclass DragAndDropContainer extends Component {\n  createList = () => {\n    let slots = [];\n    this.props.letters.map((letter, i) => {\n      return slots.push({\n        content: (\n          <DropSlot\n            id={letter.id}\n            key={`dropSlotKey-${i}`}\n            allowDrop={this.allowDrop}\n            drop={this.drop}\n          />\n        )\n      });\n    });\n    return slots;\n  };\n\n  createNewList = () => {\n    let slots = [];\n    newList.map((listItem, i) => {\n      return slots.push({\n        content: listItem\n      });\n    });\n    return slots;\n  };\n\n  allowDrop = e => {\n    e.preventDefault();\n  };\n\n  getValueFromImg = img => {\n    let n = img.indexOf(\"assets/\");\n    let value = img[n + 7];\n    return value;\n  };\n\n  drop = e => {\n    e.preventDefault();\n    var data = e.dataTransfer.getData(\"text\");\n    let droppedImg = document.getElementById(data);\n    let dropSlot = e.target;\n    // reveal card when dropped\n    droppedImg.setAttribute(\"src\", imagesPath + droppedImg.alt);\n    dropSlot.appendChild(droppedImg);\n    // change the FindMeCard\n    this.props.updatePickedCards(droppedImg.id);\n    // initial check for value dropped\n    dropSlot.setAttribute(\"value\", droppedImg.id);\n    let dropSlotId = dropSlot.getAttribute(\"id\");\n    initOrderList.push({ slot: dropSlotId, value: droppedImg.id });\n    // if all letters found, check order\n    if (initOrderList.length === 5) {\n      this.checkInitialOrder(initOrderList);\n    }\n    // add image to new sort list\n    newList[this.getRank(dropSlotId)] = (\n      <img\n        src={droppedImg.src}\n        className=\"card-img\"\n        onDragOver={e => this.allowDrop(e)}\n        onDrop={e => this.drop(e)}\n        value={this.getValueFromImg(droppedImg.src)}\n        alt=\"\"\n      />\n    );\n  };\n\n  getRank = id => {\n    switch (id) {\n      case \"z\":\n        return 0;\n      case \"o\":\n        return 1;\n      case \"o2\":\n        return 2;\n      case \"v\":\n        return 3;\n      case \"u\":\n        return 4;\n      default:\n        return null;\n    }\n  };\n\n  checkInitialOrder = list => {\n    let check = 0;\n    list.map(item => {\n      if (item.slot === item.value) {\n        check++;\n      } else if (\n        item.slot === \"o\" &&\n        (item.value === \"o\" || item.value === \"o2\")\n      ) {\n        check++;\n      } else if (\n        item.slot === \"o2\" &&\n        (item.value === \"o\" || item.value === \"o2\")\n      ) {\n        check++;\n      }\n      return null;\n    });\n    if (check === 5) {\n      return this.props.endGame();\n    } else {\n      return false;\n    }\n  };\n\n  render() {\n    return initOrderList.length !== 5 ? (\n      <DragAndDrop unrevealedLetters={this.props.unrevealedLetters} letters={this.props.letters} sortList={this.createList()} />\n    ) : (\n      <LogoSort sortList={this.createNewList()} endGame={this.props.endGame} />\n    );\n  }\n}\n\nexport default DragAndDropContainer;\n","import React, { useState, useEffect } from 'react'\nimport FindMeCard from './FindMeCard'\nimport DragAndDropContainer from './DragAndDropContainer'\n\nconst letters = [\n  { id: 'z', src: 'z.png' },\n  { id: 'o', src: 'o.png' },\n  { id: 'o2', src: 'o2.png' },\n  { id: 'v', src: 'v.png' },\n  { id: 'u', src: 'u.png' },\n]\n\nlet unrevealedLetters = letters\n\nconst MainContainer = props => {\n  const [findMeItem, setFindMeItem] = useState(null)\n  const [allFound, setAllFound] = useState(false)\n\n  useEffect(() => {\n    getFirstFindItem()\n  }, [])\n\n  const getFirstFindItem = () => {\n    let randomItem = letters[Math.floor(Math.random() * letters.length)]\n    setFindMeItem(randomItem)\n  }\n\n  const updatePickedCards = card => {\n    if (findMeItem.id !== card) {\n      props.penalize()\n    }\n    let newArr = unrevealedLetters.filter(item => item.id !== card)\n    // update list\n    unrevealedLetters = newArr\n    updateFindMeItem(unrevealedLetters)\n    if (unrevealedLetters.length === 0) {\n      setAllFound(true)\n    }\n  }\n\n  const updateFindMeItem = newArr => {\n    let randomItem = newArr[Math.floor(Math.random() * newArr.length)]\n    if (randomItem) {\n      setFindMeItem(randomItem)\n    }\n  }\n\n  return (\n      <div className='row pt-3'>\n        <div className='col-sm-12 col-md-12 col-lg-12 col-xl-8'>\n          <DragAndDropContainer\n            penalize={props.penalize}\n            updatePickedCards={updatePickedCards}\n            letters={letters}\n            endGame={props.endGame}\n            findMeItem={findMeItem}\n            unrevealedLetters={unrevealedLetters}\n          />\n        </div>\n        <div className='col-sm-12 col-md-12 col-lg-12 col-xl-4'>\n          <FindMeCard findMeItem={findMeItem} allFound={allFound} />\n        </div>\n      </div>\n  )\n}\n\nexport default MainContainer\n","import React, { useEffect } from 'react'\n\nconst imagesPath = process.env.PUBLIC_URL + '/assets/'\n\nconst EndGame = () => {\n  // restart game after 10 seconds\n  const restartGame = () => {\n      return window.location.reload()\n  }\n  useEffect(() => {\n    setInterval(restartGame, 10000)\n  }, [])\n  return (\n    <div className='container'>\n      <h1>Congrats !!!!</h1>\n      <p>You were successfull in your logo puzzle, game will restart in 10 seconds</p>\n      <img className='zoovu-logo' src={`${imagesPath}zoovu-logo.png`} alt='' />\n    </div>\n  )\n}\n\nexport default EndGame\n","import React, { useState, Fragment } from 'react'\nimport Score from './Score'\nimport MainContainer from './MainContainer'\nimport EndGame from './EndGame'\n\nconst Layout = () => {\n  let [penalty, setPenalty] = useState(0)\n  let [solved, setSolved] = useState(false)\n  let [scoreSubmitted, setScoreSubmitted] = useState(false)\n\n  const penalize = () => {\n    setPenalty((penalty += 10))\n  }\n\n  const endGame = () => {\n    setSolved(true)\n  }\n\n  const submitScore = () => {\n    setScoreSubmitted(true)\n  }\n\n  return (\n    <div className='p-5'>\n      <div className='container'>\n        <Score penalty={penalty} solved={solved} submitScore={submitScore} />\n      </div>\n      {!scoreSubmitted ? (\n        <Fragment>\n          <MainContainer penalize={penalize} endGame={endGame} />\n        </Fragment>\n      ) : (\n        <EndGame />\n      )}\n    </div>\n  )\n}\n\nexport default Layout\n","import React from 'react'\nimport './App.css'\nimport Layout from './Components/Layout'\n// bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Layout />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}